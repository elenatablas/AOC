#!/bin/bash

SCRIPT_DIR="$(readlink -fm "$(dirname "$0")")"
SCRIPT_COMMAND="$(basename "$0")"
set -o nounset
set -o pipefail
set -o errexit
trap 'echo "$SCRIPT_COMMAND: error $? at line $LINENO"' ERR

HOST="$(hostname -s | sed 's/-aoc-docker-image$//')"
OUTPUT_FILE="${OUTPUT_FILE:-benchmark-heat.$HOST.$(date -I).tsv}"

[ -e "$OUTPUT_FILE" ] && { echo "«$OUTPUT_FILE» already exists and will not be overwritten. Remove it or use another name." >&2 ; exit 1 ; }

REMAKE="${REMAKE:-yes}"

if [[ "$REMAKE" == "yes" ]] ; then
    pushd "$SCRIPT_DIR" &> /dev/null
    make clean
    make all
    popd &> /dev/null
fi

VERSIONS_TESTS="${VERSIONS_TESTS:-gcc clang icc}"
SIZES_TESTS=$(for i in tests/*.in ; do echo "$i" | sed -e 's|^tests/||' -e 's|.in$||' ; done)
THREADS_MAX="${THREADS_MAX:-$(grep -E processor.: /proc/cpuinfo | wc -l)}"
THREADS_TESTS="${THREADS_TESTS:-$(seq -s ' ' 1 $THREADS_MAX)}"

printf 'compiler\tsize\tthreads\tTIME\tTIME_err\n' > "$OUTPUT_FILE"

for v in $VERSIONS_TESTS ; do
    for s in $SIZES_TESTS ; do
        for p in ${THREADS_TESTS} ; do 
            echo "Testing size = $s, threads = $p, compiler $v"
            TMP_OUT="$(mktemp)"
            TMP_ERR="$(mktemp)"
            export OMP_NUM_THREADS="$p"
            if "${SCRIPT_DIR}/heat-${v}" $(cat "tests/${s}.in") --print-result=false --print-iterations=false --print-difference=false --print-each-time=true --print-average-time=true --repeat-times=7 --warmup-times=2 2> "$TMP_ERR" | tee "$TMP_OUT" ; then
                TIME="$(grep "^Average time" "$TMP_OUT" | cut -d: -f 2 | tr -d ' ' | cut -d± -f1)"
                TIME_ERR="$(grep "^Average time" "$TMP_OUT" | cut -d: -f 2 | tr -d ' ' | cut -d± -f2)"
                printf "%s\t%s\t%s\t%s\t%s\n" "$v" "$s" "$p" "$TIME" "$TIME_ERR" >> "$OUTPUT_FILE"
                rm -f "$TMP_OUT"
                rm -f "$TMP_ERR"
            else 
                printf "ERROR (valor devuelto %d, stdout %s, stderr %s)\n" $? "$TMP_OUT" "$TMP_ERR"
            fi
        done 
    done
done
    
