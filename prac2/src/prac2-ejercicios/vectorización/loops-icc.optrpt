Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.3.0 Build 20210609_000000

Compiler options: -std=c++20 -Wall -O2 -xCORE-AVX2 -qopt-report=5 -qopt-report-file=loops-icc.optrpt -oloops-icc

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/9=11.1%] loops.cpp(12,33)
  -> (42,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (42,17) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)) (isz = 0) (sz = 9)
     [[ Called routine is noinline  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at loops.cpp(15,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at loops.cpp(17,5)
   <Distributed chunk1>
      remark #25426: Loop Distributed (2 way) 
      remark #15388: vectorization support: reference A[i] has aligned access   [ loops.cpp(18,7) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 38.000 
      remark #15478: estimated potential speedup: 0.150 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at loops.cpp(17,5)
   <Remainder, Distributed chunk1>
   LOOP END

   LOOP BEGIN at loops.cpp(17,5)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between B[i+1] (19:7) and B[i] (19:7)
      remark #15346: vector dependence: assumed ANTI dependence between B[i] (19:7) and B[i+1] (19:7)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at loops.cpp(17,5)
   <Remainder, Distributed chunk2>
   LOOP END

   LOOP BEGIN at loops.cpp(22,5)
      remark #25427: Loop Statements Reordered
      remark #15389: vectorization support: reference B[i+1] has unaligned access   [ loops.cpp(24,7) ]
      remark #15388: vectorization support: reference C[i] has aligned access   [ loops.cpp(24,18) ]
      remark #15388: vectorization support: reference A[i] has aligned access   [ loops.cpp(23,7) ]
      remark #15388: vectorization support: reference A[i] has aligned access   [ loops.cpp(23,14) ]
      remark #15388: vectorization support: reference B[i] has aligned access   [ loops.cpp(23,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 12 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 3.990 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=249999
   LOOP END

   LOOP BEGIN at loops.cpp(27,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between A[i-1] (28:7) and A[i] (28:7)
      remark #15346: vector dependence: assumed ANTI dependence between A[i] (28:7) and A[i-1] (28:7)
      remark #25438: unrolled without remainder by 2  
   LOOP END

   LOOP BEGIN at loops.cpp(32,5)
      remark #15388: vectorization support: reference C[i] has aligned access   [ loops.cpp(33,7) ]
      remark #15388: vectorization support: reference A[i] has aligned access   [ loops.cpp(33,14) ]
      remark #15388: vectorization support: reference B[i] has aligned access   [ loops.cpp(33,25) ]
      remark #15412: vectorization support: streaming store was generated for C[i]   [ loops.cpp(33,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15467: unmasked aligned streaming stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 1.750 
      remark #15478: estimated potential speedup: 4.570 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=250000
   LOOP END

   LOOP BEGIN at loops.cpp(36,5)
      remark #15388: vectorization support: reference C[i] has aligned access   [ loops.cpp(37,23) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 8
      remark #15309: vectorization support: normalized vectorization overhead 0.475
      remark #15355: vectorization support: total is double type reduction   [ loops.cpp(14,16) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 3.990 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=31250
   LOOP END

   LOOP BEGIN at loops.cpp(22,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference B[i+1] has unaligned access   [ loops.cpp(24,7) ]
      remark #15388: vectorization support: reference C[i] has aligned access   [ loops.cpp(24,18) ]
      remark #15388: vectorization support: reference A[i] has aligned access   [ loops.cpp(23,7) ]
      remark #15388: vectorization support: reference A[i] has aligned access   [ loops.cpp(23,14) ]
      remark #15388: vectorization support: reference B[i] has aligned access   [ loops.cpp(23,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 3.990 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

loops.cpp(12,33):remark #34051: REGISTER ALLOCATION : [main] loops.cpp:12

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rsi rdi r8-r9 zmm0-zmm15]
        
    Routine temporaries
        Total         :      98
            Global    :      35
            Local     :      63
        Regenerable   :      16
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       2 [1.73e-07 ~ 0.0%]
            Writes    :       2 [1.73e-07 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double))/usr/include/c++/11/ostream(221,7)

===========================================================================

Begin optimization report for: std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &)))/usr/include/c++/11/ostream(109,7)

===========================================================================

Begin optimization report for: std::ctype<char>::widen(const std::ctype<char> *, char) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::ctype<char>::widen(const std::ctype<char> *, char) const) /usr/include/c++/11/bits/locale_facets.h(876,7)

===========================================================================

Begin optimization report for: std::basic_ios<char, std::char_traits<char>>::widen(const std::basic_ios<char, std::char_traits<char>> *, char) const

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::basic_ios<char, std::char_traits<char>>::widen(const std::basic_ios<char, std::char_traits<char>> *, char) const)/usr/include/c++/11/bits/basic_ios.h(450,7)

===========================================================================

Begin optimization report for: std::endl<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::endl<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &))/usr/include/c++/11/ostream(682,5)

===========================================================================

Begin optimization report for: std::flush<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (std::flush<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &))/usr/include/c++/11/ostream(704,5)

===========================================================================

Begin optimization report for: std::__check_facet<std::basic_ios<char, std::char_traits<char>>::__ctype_type>(const std::basic_ios<char, std::char_traits<char>>::__ctype_type *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::__check_facet<std::basic_ios<char, std::char_traits<char>>::__ctype_type>(const std::basic_ios<char, std::char_traits<char>>::__ctype_type *)) /usr/include/c++/11/bits/basic_ios.h(48,5)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [9/9=100.0%] <compiler generated>
  -> EXTERN: /usr/include/c++/11/iostream:(74,25) __cxa_atexit(void (*)(void *), void *, void *)
  -> EXTERN: /usr/include/c++/11/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The routine declaration is annotated with "__attribute__((noinline))".  
    Remove this annotation to permit the compiler to inline this routine.

